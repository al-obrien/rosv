% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_lists.R
\name{create_osv_list}
\alias{create_osv_list}
\title{Create list of packages identified in OSV database}
\usage{
create_osv_list(
  rosv_query = NULL,
  ecosystem = "PyPI",
  delim = "\\t",
  as.data.frame = FALSE,
  refresh = FALSE,
  clear_cache = FALSE
)
}
\arguments{
\item{rosv_query}{A table of vulnerabilities created via \code{query_osv}; if NA will pull entire database based upon \code{ecosystem} parameter.}

\item{ecosystem}{Character value of either 'PyPI' or 'CRAN'.}

\item{delim}{The deliminator to separate the package and version details.}

\item{as.data.frame}{Boolean value to determine if a data.frame should be created instead of a list.}

\item{refresh}{Force refresh of the cache to grab latest details from OSV databases.}

\item{clear_cache}{Boolean value, to force clearing of the existing cache upon exiting function.}
}
\value{
A vector object containing the package and version details; if \code{as.data.frame} is selected
this vector will be reformatted into a \code{data.frame} object.
}
\description{
Create list of packages identified in OSV database
}
\details{
This is the core calculation to extract details from the database. As such, if
you set a \code{future::plan()} for parallelization, that will be respected via the
\code{furrr} package. The default will be to run sequentially.

NOTE: Currently, returns more packages than just subset if using query approach (all packages under vulnerability found). May require subset after returned.
}
\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}

pypi_vul <- create_osv_list()
file_name1 <- file.path(tempdir(), 'pypi_vul.csv')
writeLines(pypi_vul, file_name1)

cran_vul <- create_osv_list(ecosystem = 'CRAN', delim = ',')
file_name2 <- file.path(tempdir(), 'cran_vul.csv')
writeLines(cran_vul, file_name2)

# Clean up
try(unlink(c(file_name1, file_name2)))

# Use from query instead of entire database
pkg_vul <- osv_query(c('dask', 'dash'), ecosystem = c('PyPI', 'PyPI'))
create_osv_list(rosv_query = pkg_vul)

\dontrun{
# In parallel
future::plan(multisession, workers = 4)
pypi_vul <- create_osv_list()
future::plan(sequential)
}
\dontshow{\}) # examplesIf}
}
